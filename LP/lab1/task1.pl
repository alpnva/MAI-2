% Первая часть задания - предикаты работы со списками
% Реализация стандартных предикатов обработки списков

% Длина списка
% (список, длина)

length([], 0).
length([_ | L], N):-length(L, M), N is M + 1.

% Принадлежность элемента списку
%(элемент, список)

member(X, [X | _]).
member(X, [_ | T]):-member(X, T).

% Конкатенация списков
%(список1, сипсок2, список1+2)

append([], L, L).
append([X, L1], L2, [X | L3]):-append(L1, L2, L3).

% Удаление элемента из списка
%(элемент, список, список без элемента)

remove(X, [X | T], T).
remove(X, [Y | T], [Y | Z]):-remove(X, T, Z).

% Перестановки элементов в списке
%(список, перестановка)

permute([], []).
permute(L, [X | T]):-delete(X, L, Y), permute(Y, T).

% Подсписки списка
%(подсписок, список)

sublist(S, L):-append(_, L1, L), append(S, _, L1).

% Вариант 5. Удаление N первых элементов.
% Первый параметр - количество элементов, второй - список исходный, третий - список после удаления
    % С использованием стандартных предикатов
    delete_n(X, N, Y):- append(A, X, Y), length(A, N).
    % Без использования стандартных предикатов
    delete_n2(0, L, L).
    delete_n2(_, [], []).
    delete_n2(N, [_|T1], L2):- N > 0, N1 is N-1, delete_n2(N1, T1, L2).
    
% Вариант 10. Лексигографическое сравнение двух списков.    
    % С использованием стандартных предикатов
    lincompare([], []).
    lincompare([X|Tail], Y):- Remove(Y, X, Y1), lincompare(Tail, Y1).
    % Без использования стандартных предикатов
    lincompare2([X|Tail], [Y|Tail]):- X =:= Y, lincompare2(Tail, Tail).
    lincompare2([X], [Y]):- X =:= Y.
    
% Лексиграфическое сравнение двух списков при удалении N первых элементов.
    tailcompare(L1, L2, K):- delete_n2(K, L1, S1), delete_n2(K, L2, S2), lincompare2(S1, S2).
